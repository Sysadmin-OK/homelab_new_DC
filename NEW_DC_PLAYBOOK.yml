---
- name: Create new Active-Directory Domain & Forest
  hosts: domaincontrollers
#Loads the passwords.yml file which contains secrets
  pre_tasks:
    - name: include pass vars
      include_vars: "passwords.yml"
#The following variables are listed in the encrypted passwords.yml file
#temp_password: 
#dc_password: 
#recovery_password:
#local_admin: 

    #server variables
  vars:
    temp_address: 192.168.1.212
    dc_address: 192.168.1.212
    dc_netmask_cidr: 24
    dc_gateway: 192.168.1.254
    dc_hostname: "dc01"
    netbios_name: "dc01bfnet"
    domain_name: "dc01.local"
    upstream_dns_1: 8.8.8.8
    upstream_dns_2: 8.8.4.4
    ntp_servers: "0.us.pool.ntp.org,1.us.pool.ntp.org"
    #group attributes
    group_name: "bfnetusers"
    #user attributes
    user_name: "Bob"
    firstname: "Bob"
    lastname: "Smith"
    company: "BFNET"

  gather_facts: no

#Set Static IP Address
  tasks:
    - name: Set static IP address
      win_shell: "(new-netipaddress -InterfaceAlias Ethernet0 -IPAddress {{ dc_address }} -prefixlength     {{dc_netmask_cidr}} -defaultgateway {{ dc_gateway }})"
      delegate_to: '{{ temp_address }}'  
      ignore_errors: True 

#Add host to inventory with the new IP and wait for it to respond
    - name: Add host to Ansible inventory with new IP
      add_host:
        name: '{{ dc_address }}'
        ansible_user: '{{ local_admin }}'
        ansible_password: '{{ temp_password }}'
        ansible_connection: winrm
        ansible_winrm_transport: ntlm
        ansible_winrm_server_cert_validation: ignore
        ansible_winrm_port: 5986 
    - name: Wait for system to become reachable over WinRM
      wait_for_connection:
        timeout: 900
      delegate_to: '{{ dc_address }}'

#Sets the administrator password
    - name: Set Password
      win_user:
        name: administrator
        password: "{{dc_password}}"
        state: present
      delegate_to: '{{ dc_address }}'
      ignore_errors: True  

#Adds the host to inventory with the new password
    - name: Add host to Ansible inventory with new Password
      add_host:
        name: '{{ dc_address }}'
        ansible_user: '{{ local_admin }}'
        ansible_password: '{{ dc_password }}'
        ansible_connection: winrm
        ansible_winrm_transport: ntlm
        ansible_winrm_server_cert_validation: ignore
        ansible_winrm_port: 5986 
    - name: Wait for system to become reachable over WinRM
      wait_for_connection:
        timeout: 900
      delegate_to: '{{ dc_address }}'

#Sets the upstream DNS server
    - name: Set upstream DNS server 
      win_dns_client:
        adapter_names: '*'
        ipv4_addresses:
        - '{{ upstream_dns_1 }}'
        - '{{ upstream_dns_2 }}'
      delegate_to: '{{ dc_address }}'

#Stops/starts the time service so we can set the NTP servers
    - name: Stop the time service
      win_service:
        name: w32time
        state: stopped
      delegate_to: '{{ dc_address }}'
    - name: Set NTP Servers
      win_shell: 'w32tm /config /syncfromflags:manual /manualpeerlist:"{{ntp_servers}}"'
      delegate_to: '{{ dc_address }}'  
    - name: Start the time service
      win_service:
        name: w32time
        state: started  
      delegate_to: '{{ dc_address }}'

#Disables the firewall for the next steps which can fail with the firewall turned on
    - name: Disable firewall for Domain, Public and Private profiles
      win_firewall:
        state: disabled
        profiles:
        - Domain
        - Private
        - Public
      tags: disable_firewall
      delegate_to: '{{ dc_address }}'

#Changes the hostname of the DC
    - name: Change the hostname 
      win_hostname:
        name: '{{ dc_hostname }}'
      register: res
      delegate_to: '{{ dc_address }}'
    - name: Reboot
      win_reboot:
      when: res.reboot_required   
      delegate_to: '{{ dc_address }}'

#Installs active directory services
    - name: Install Active Directory
      win_feature: >
           name=AD-Domain-Services
           include_management_tools=yes
           include_sub_features=yes
           state=present
      register: result
      delegate_to: '{{ dc_address }}'

#Creates the domain
    - name: Create Domain
      win_domain: >
         dns_domain_name='{{ domain_name }}'
         safe_mode_password='{{ recovery_password }}'
         domain_netbios_name='{{ netbios_name }}'
      register: ad
      delegate_to: '{{ dc_address }}'
    - name: reboot server
      win_reboot:
       msg: "Installing AD. Rebooting..."
       pre_reboot_delay: 15
      when: ad.changed
      delegate_to: "{{ dc_address }}"

#Sets DNS server to localhost
    - name: Set internal DNS server 
      win_dns_client:
        adapter_names: '*'
        ipv4_addresses:
        - '127.0.0.1'
      delegate_to: '{{ dc_address }}'

#Turns the firewall back on
    - name: Enable firewall for Domain, Public and Private profiles
      win_firewall:
        state: enabled
        profiles:
        - Domain
        - Private
        - Public
      tags: disable_firewall
      delegate_to: '{{ dc_address }}'

#Creates a group 
    - name: Ensure the group specified exists using sAMAccountName
      community.windows.win_domain_group:
        name: '{{ group_name }}'
        scope: global

#Creates a user who is domain admin
    - name: Ensure user bob is present and is a domain admin
      community.windows.win_domain_user:
        name: '{{ user_name }}'
        firstname: '{{ firstname }}'
        surname: '{{ lastname }}'
        company: ' {{ company }}'
        password: Belitornotthiisanuncpas1!
        state: present
        groups:
          - '{{ group_name }}'
          - 'Domain Admins'

